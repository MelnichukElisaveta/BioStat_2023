trial_results <- df_trial %>%
group_by(center_ID) %>%
do(broom::tidy(t.test(Hg_change ~ 1, conf.level = 0.95, data = .))) %>%
dplyr::select(estimate, conf.low, conf.high) %>%
mutate(CI_width = conf.high - conf.low) %>%
mutate(out = ifelse((H0_Hg_improve < conf.high) & (H0_Hg_improve > conf.low), 'Fail to reject H0', 'Reject H0'))
table(trial_results$out)
# - Как зависит ошибка первого рода от размера выборки и вариативности признака?
# - Что произойдет, если мы нарушим H0?
# - От чего зависит величина ошибки II рода?
ggplot(trial_results, aes(y = center_ID)) +
geom_errorbar(mapping = aes(xmin = conf.low, xmax = conf.high, color = out), size = 2) +
geom_vline(xintercept=H0_Hg_improve, linetype="dashed",
color = "black", size=2) +
theme_bw() +
theme(text = element_text(size = 30))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
p_R <- 0.1 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.2 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
sample_size <- 100 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
View(df_trial)
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
?prop.test
sample_size <- 1000 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
true_diff <- p_R - p_T #истинная разность в вероятностях
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
contingency_table <- table(df_trial$recovery_status, df_trial$arm) # таблица сопряженности для категорий "recovery_status" и "arm"
# Проведите тест на различие пропорций
test_result <- prop.test(contingency_table)
# Оценка различия пропорций
estimated_OR <- test_result$estimate[1]
# P-значение
p_value <- test_result$p.value
if (abs(estimated_OR - true_OR) < 1 && p_value < 0.05) {
cat("Факт накрытия истинной разности в вероятностях обнаружен.")
} else {
cat("Факт накрытия истинной разности в вероятностях не обнаружен.")
}
contingency_table
hist(df_prop$estimate1 - df_prop$estimate2, main = "Гистограмма разницы вероятностей",
xlab = "Разница вероятностей", ylab = "Частота")
#Проверить, корректно ли работает методика построения ДИ, реализованная в prop.test, при различных значениях p_R и p_T.
p_R <- 0.9 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.5 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
sample_size <- 100 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
#Проверить, корректно ли работает методика построения ДИ, реализованная в prop.test, при различных значениях p_R и p_T.
p_R <- 0.9 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.1 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
sample_size <- 100 # Количество пациентов в каждой из групп
df_trial <- data.frame(
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, 2),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
#Проверить, корректно ли работает методика построения ДИ, реализованная в prop.test, при различных значениях p_R и p_T.
p_R <- 0.9 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.1 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
sample_size <- 100
num_simulations <- 1000
confidence_intervals <- matrix(NA, nrow = num_simulations, ncol = 2)
for (i in 1:num_simulations) {
# Генерируйте случайные выборки с вероятностями p_R и p_T
group1 <- sample(c(1, 0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R))
group2 <- sample(c(1, 0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T))
# Проведите тест на различие пропорций
test_result <- prop.test(group1, group2)
# Сохраните доверительный интервал
confidence_intervals[i, ] <- test_result$conf.int
}
# Создайте таблицу сопряженности для категорий "recovery_status" и "arm"
contingency_table <- table(df_trial$recovery_status, df_trial$arm)
# Проведите тест на различие пропорций
test_result <- prop.test(contingency_table)
View(test_result)
?prop.test
#Проверить, корректно ли работает методика построения ДИ, реализованная в prop.test, при различных значениях p_R и p_T.
p_R <- 0.9 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.1 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
sample_size <- 100
num_simulations <- 1000
confidence_intervals <- matrix(NA, nrow = num_simulations, ncol = 2)
for (i in 1:num_simulations) {
# Генерируйте случайные выборки с вероятностями p_R и p_T
group1 <- sample(c(1, 0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R))
group2 <- sample(c(1, 0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T))
# Проведите тест на различие пропорций
test_result <- prop.test(group1, group2, 100)
# Сохраните доверительный интервал
confidence_intervals[i, ] <- test_result$conf.int
}
num_centers <- 1000 # Сколько раз повторим эксперимент
df_trial <- data.frame(
center_ID = rep(1:num_centers, each = sample_size),
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, num_centers),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
View(df_trial)
true_diff <- p_R - p_T #истинная разность в вероятностях
df_prop <- df_trial %>%
group_by(arm) %>% # Группировка типу интервенции (тест/референс)
dplyr::summarise(x = sum(recovery_status), # Подсчет числа положительных исходов (единиц)
n = n()) %>% # Подсчет общего числа пациентов в группе
ungroup() %>%
dplyr::summarise(X = list(x), N = list(n)) %>% # Соединение все x и n в отдельные вектора
rowwise() %>%
mutate(tst = list(broom::tidy(prop.test(X, N)))) %>% # Вычисление ДИ на разницу пропорций
unnest(tst) %>% # Раскладка результатов prop.test по столбцам
mutate(catch = ifelse(conf.low < p_R-p_T & p_R-p_T < conf.high, "Catch", "Miss"))
print(df_prop)
contingency_table <- table(df_trial$recovery_status, df_trial$arm) # таблица сопряженности для категорий "recovery_status" и "arm"
test_result <- prop.test(contingency_table) #тест на различие пропорций
estimated_OR <- test_result$estimate[1] # Оценка различия пропорций
# P-значение
p_value <- test_result$p.value
if (p_value < 0.05) {
cat("Факт накрытия истинной разности в вероятностях обнаружен.")
} else {
cat("Факт накрытия истинной разности в вероятностях не обнаружен.")
}
hist(df_prop$estimate1 - df_prop$estimate2, main = "Гистограмма разницы вероятностей",
xlab = "Разница вероятностей", ylab = "Частота")
#не понимаю, как мы можем построить эту гистограмму(
View(df_prop)
df_OR <- df_trial %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
print(df_OR)
p_R <- 0.1 # Истинная вероятность выздоровления для референса (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
p_T <- 0.2 # Истинная вероятность выздоровления для теста (в ГЕНЕРАЛЬНОЙ СОВОКУПНОСТИ)
true_OR <- (p_T/(1-p_T))/(p_R/(1-p_R)) # Истинное отношение шансов
df_OR <- df_trial %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
print(df_OR)
sample_size <- 100 # Количество пациентов в каждой из групп
num_centers <- 1000 # Сколько раз повторим эксперимент
df_trial_2 <- data.frame(
center_ID = rep(1:num_centers, each = sample_size),
arm = rep(c('R', 'T'), each = sample_size),
patient_ID = rep(1:sample_size, num_centers),
recovery_status = c(sample(c(1,0), sample_size, replace = TRUE, prob = c(p_R, 1 - p_R)),
sample(c(1,0), sample_size, replace = TRUE, prob = c(p_T, 1 - p_T)))
)
df_OR <- df_trial_2 %>%
dplyr::summarise(broom::tidy(fisher.test(table(.$arm, .$recovery_status)))) %>%
mutate(catch = ifelse(conf.low < true_OR & true_OR < conf.high, "Catch", "Miss"))
print(df_OR)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
insurance <- read.csv('insurance_cost.csv',
stringsAsFactors = T)
head(insurance)
str(insurance)
ggplot(data = insurance,
aes(x = bmi)) +
geom_histogram()
ggplot(data = insurance,
aes(x = charges)) +
geom_histogram()
ggplot(data = insurance,
aes(x = bmi)) +
geom_histogram()
ggplot(data = insurance,
aes(x = charges)) +
geom_histogram()
charges_mean <- round(mean(insurance$charges),1)
charges_median <- round(median(insurance$charges),1)
ggplot(data = insurance,
aes(x = charges)) +
geom_density() +
geom_vline(aes(xintercept = charges_median), color = 'red') +
annotate("text",
x= charges_median -3000,
y= 0,
label=paste0("Median=", charges_median),
color = 'red') +
geom_vline(aes(xintercept = charges_mean), color = 'blue') +
annotate("text",
x= charges_mean+3500,
y= 0,
label=paste0("Mean=", charges_mean),
color = 'blue')
theme_minimal() +
labs(y = 'Плотность', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = sex)) +
theme_minimal() +
labs(y = 'Пол', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = smoker)) +
theme_minimal() +
labs(y = 'Курение', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = region)) +
theme_minimal() +
labs(y = 'Регион', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = sex)) +
theme_minimal() +
labs(y = 'Пол', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = smoker)) +
theme_minimal() +
labs(y = 'Курение', x = 'Расходы')
ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = region)) +
theme_minimal() +
labs(y = 'Регион', x = 'Расходы')
dencity_plot <- ggplot(data = insurance,
aes(x = charges)) +
geom_density() +
geom_vline(aes(xintercept = charges_median), color = 'red') +
annotate("text",
x= charges_median -3000,
y= 0,
label=paste0("Median=", charges_median),
color = 'red') +
geom_vline(aes(xintercept = charges_mean), color = 'blue') +
annotate("text",
x= charges_mean+3500,
y= 0,
label=paste0("Mean=", charges_mean),
color = 'blue') +
theme_minimal() +
labs(y = 'Плотность', x = 'Расходы')
bx1 <- ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = sex)) +
theme_minimal() +
labs(y = 'Пол', x = 'Расходы')
bx2 <- ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = smoker)) +
theme_minimal() +
labs(y = 'Курение', x = 'Расходы')
bx3 <- ggplot() +
geom_boxplot(data = insurance,
aes(x = charges, y = region)) +
theme_minimal() +
labs(y = 'Регион', x = 'Расходы')
ggpubr::ggarrange(dencity_plot, bx1, bx2, bx3,
labels = c("График плотности", "Боксплот 1", "Боксплот 2", "Боксплот 3"),
ncol = 1, nrow = 4) +
ggtitle('4 графика')
ggplot(data = insurance,
aes(x = charges, color = region, fill = region, group = region)) +
geom_density() +
facet_grid(. ~ region) +
theme_minimal() +
labs(y = 'Плотность', x = 'Расходы')
insurance %>%
ggplot(aes(x=age, y=charges)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных age и charges') +
labs(y = 'Расходы', x = 'Возраст') +
theme(
axis.text.x = element_text(size = 14))
insurance %>%
ggplot(aes(x=age, y=charges)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных age и charges') +
labs(y = 'Расходы', x = 'Возраст') +
theme(
axis.text.x = element_text(size = 14))+
geom_smooth(method = "lm", se = FALSE)
insurance %>%
ggplot(aes(x=age, y=charges, collor = smoker)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных age и charges') +
labs(y = 'Расходы', x = 'Возраст') +
theme(
axis.text.x = element_text(size = 14))+
geom_smooth(method = "lm", se = FALSE)
insurance %>%
ggplot(aes(x=bmi, y=charges)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных bmi и charges') +
labs(y = 'Расходы', x = 'bmi') +
theme(
axis.text.x = element_text(size = 14))
insurance %>%
ggplot(aes(x=bmi, y=charges)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных bmi и charges') +
labs(y = 'Расходы', x = 'bmi') +
theme(
axis.text.x = element_text(size = 14))+
geom_smooth(method = "lm", se = FALSE)
insurance %>%
ggplot(aes(x=bmi, y=charges, collor = smoker)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('scatter plot отношения переменных bmi и charges') +
labs(y = 'Расходы', x = 'bmi') +
theme(
axis.text.x = element_text(size = 14))+
geom_smooth(method = "lm", se = FALSE)
insurance %>%
select(where(smoker= 'yes'))
insurance %>%
filter(smoker == "yes")
insurance %>%
filter(smoker == "yes") %>%
ggplot(aes(x = charges, y = sex)) +
geom_boxplot() +
theme_minimal() +
labs(y = 'Пол', x = 'Расходы')
insurance %>%
filter(smoker == "yes") %>%
ggplot(aes(x = charges, y = sex)) +
geom_boxplot() +
theme_minimal() +
labs(y = 'Пол', x = 'Расходы')+
ggtitle('расходы среди курящих в зависимости от пола')
insurance %>%
filter(sex == "female") %>%
ggplot(aes(x = bmi, y = sex)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Диаграмма рассеяния bmi и возраста') +
labs(y = 'Пол', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE)
insurance %>%
filter(sex == "female") %>%
ggplot(aes(x = bmi, y = age)) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Диаграмма рассеяния bmi и возраста') +
labs(y = 'Возраст', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE)
insurance %>%
filter(region == "northeast") %>%
ggplot(aes(x = charges, color = children, fill = children, group = children)) +
geom_density() +
facet_grid(. ~ children) +
theme_minimal() +
labs(y = 'Плотность', x = 'Расходы')
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
summary(insurance)
table(insurance$age_group)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
insurance <- read.csv('insurance_cost.csv',
stringsAsFactors = T)
head(insurance)
str(insurance)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
insurance <- read.csv('insurance_cost.csv',
stringsAsFactors = T)
insurance %>%
ggplot(aes(x = bmi, y = log(charges))) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Отношение индекса массы тела к логарифму трат по возрастным группам') +
labs(y = 'log(charges)', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE)
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
insurance %>%
ggplot(aes(x = bmi, y = log(charges))) +
geom_point(size=3) +
theme_minimal() +
ggtitle('Отношение индекса массы тела к логарифму трат по возрастным группам') +
labs(y = 'log(charges)', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(. ~ age_group)
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
insurance %>%
ggplot(aes(x = bmi, y = log(charges))) +
geom_point(size=3, color = 'blue') +
theme_minimal() +
ggtitle('Отношение индекса массы тела к логарифму трат по возрастным группам') +
labs(y = 'log(charges)', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(. ~ age_group)
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
insurance %>%
ggplot(aes(x = bmi, y = log(charges))) +
geom_point(size=3, color = "#69b3a2", alpha=0.9) +
theme_minimal() +
ggtitle('Отношение индекса массы тела к логарифму трат по возрастным группам') +
labs(y = 'log(charges)', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(. ~ age_group)
insurance <- insurance %>%
mutate(
age_group = case_when(
age < 35 ~ "21-34",
age >= 35 & age < 50 ~ "35-49",
age >= 50 ~ "50+"
))
insurance %>%
ggplot(aes(x = bmi, y = log(charges))) +
geom_point(size=3, color = "#926EAE", alpha=0.7) +
theme_minimal() +
ggtitle('Отношение индекса массы тела к логарифму трат по возрастным группам') +
labs(y = 'log(charges)', x = 'bmi') +
geom_smooth(method = "lm", se = FALSE) +
facet_grid(. ~ age_group)
which git
setwd("C:/Users/Лиза/git/BioStat_2023")
