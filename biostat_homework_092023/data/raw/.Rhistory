tibble(var_1 = c(1:10) - 100, var_2 = 1:100)
tibble(var = 1:10, var = var - 10000000)
f %>% View()
data <- readr::read_tsv("data_tsv.tsv")
data %<% as_tibble()
data %>% as_tibble()
library(dplyr)
data %>% select(where(is.numeric) & where(function(x) sd(x, na.rm = TRUE) > 1))
data %>% select(function(x) any(str_detect(x, "Жен")))
data %>% select(`Группа`, (function(x) is.factor(x)) | where(function(x) is.numeric(x)))
data %>% select(`Группа крови`, `Возраст`, function(x) anyNA(x))
data %>% select(`Группа`, function(x) !is.factor(x))
data %>% select(`Пол`, `Группа`, `Базофилы_E1`)
data %>% select(function(x) sd(x, na.rm = TRUE) > 1)
data %>% select(Группа крови, `Возраст`, function(x) anyNA(x))
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
?flextable()
pwd
getwd()
setwd("C:/Users/Лиза/Documents/git/BioStat_2023")
setwd("C:/Users/Лиза/Documents/git/BioStat_2023/")
setwd("C:/Users/Лиза/git/BioStat_2023")
setwd("C:/Users/Лиза/git/BioStat_2023/GitHub")
setwd("C:/Users/Лиза/Documents")
library(openxlsx)
library(ggplot2)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
homo <- read.xlsx("homocistein.xlsx")
homo %>% as.tibble()
homo %>% as_tibble()
View(homo)
str(homo)
cor.test(homo$фолиевая_кислота, homo$гомоцистеин, method = "spearman")
library(openxlsx)
library(ggplot2)
library(DescTools)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
homo <- read.xlsx("homocistein.xlsx")
homo %>% as_tibble()
cor.test(homo$фолиевая_кислота, homo$гомоцистеин, method = "spearman")
ggplot(homo, aes(x = гомоцистеин, y = фолиевая_кислота)) +
geom_point(shape = 17, size = 2.5) +
xlab('Концентрация_ГЦ, нг/мл') + ylab('Концентрация_фолатов')
library(openxlsx)
library(ggplot2)
library(DescTools)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
homo <- read.xlsx("homocistein.xlsx")
homo %>% as_tibble()
getwd()
s <- read.xlsx("страты.xlsx")
s %>% as_tibble()
cor.test(s$фолиевая.кислота, s$гомоцистеин, method = "spearman")
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), summary())) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
statistics <- list(
`Количество субъектов` = ~length(.x),
`Количество (есть данные)` = ~sum(!is.na(.x)),
`Нет данных` = ~sum(is.na(.x)),
`Ср. знач.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", mean(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`95% ДИ для среднего` = ~sd(.x, na.rm = TRUE) %>% round(2) %>% as.character(),
`мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
s <- read.xlsxhomo("страты.xlsx")
s <- read.xlsx("страты.xlsx")
s %>% as_tibble()
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
s$MTHFR_С677Т <- as.character(s$MTHFR_С677Т)
s$MTHFR_С677Т <- as.character(s$MTHFR_С677Т)
s$пол <- as.character(s$пол)
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
statistics <- list(
`Количество (есть данные)` = ~sum(!is.na(.x)),
`Нет данных` = ~sum(is.na(.x)),
`Станд. отклон.` = ~ifelse(sum(!is.na(.x)) < 3, "Н/П*", sd(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`95% ДИ для среднего` = ~sd(.x, na.rm = TRUE) %>% round(2) %>% as.character(),
`мин. - макс.` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(min(.x, na.rm = TRUE) %>% round(2), " - ", max(.x, na.rm = TRUE) %>% round(2))),
`Медиана` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", median(.x, na.rm = TRUE) %>% round(2) %>% as.character()),
`Q1 - Q3` = ~ifelse(sum(!is.na(.x)) == 0, "Н/П*", paste0(quantile(.x, 0.25, na.rm = TRUE) %>% round(2), " - ", quantile(.x, 0.75, na.rm = TRUE) %>% round(2)))
)
s %>%
select(`страта`, where(is.numeric)) %>%
group_by(`страта`) %>%
summarise(across(where(is.numeric), statistics)) %>%
pivot_longer(!`страта`) %>%
separate(name, into = c("Переменная", "Статистика"), sep = "__") %>%
rename(`Значение` = value)
by(s$фолиевая.кислота, INDICES = s$страта, summary)
by(s$фолиевая.кислота, INDICES = s$страта, shapiro.test)
wilcox.test(фолиевая.кислота ~ страта, s)
str(summary())
str(summary)
by(s$гомоцистеин, INDICES = s$страта, summary)
by(s$гомоцистеин, INDICES = s$страта, shapiro.test)
wilcox.test(гомоцистеин ~ страта, s)
by(s$MTHFR_С677Т, INDICES = s$страта, table)
by(s$возраст, INDICES = s$страта, summary)
by(s$возраст, INDICES = s$страта, shapiro.test)
wilcox.test(возраст ~ страта, s)
s$MTHFR_А1298С <- as.character(s$MTHFR_А1298С)
s$MTRA2756G <- as.character(s$MTRA2756G)
s$MТRR_A66G <- as.character(s$MТRR_A66G)
by(s$MTHFR_С677Т, INDICES = s$страта, table)
by(s$MTHFR_А1298С, INDICES = s$страта, table)
by(s$MTRA2756G, INDICES = s$страта, table)
by(s$MТRR_A66G, INDICES = s$страта, table)
by(s$гомоцистеин, INDICES = s$страта, boxplot)
boxplot(s$гомоцистеин ~ s$страта)
boxplot(s$фолиевая.кислота ~ s$страта)
plot((x^2+y^2-1)*3-x^2*y^2=0)
library(openxlsx)
love <- read.xlxs("love.xlsx")
love <- read.xlsx("love.xlsx")
plot(love$x, love$y, type = "l")
x <- readr::read_rds("numeric_data.rds")
round(psych::describe(x, na.rm = TRUE, skew = FALSE, ranges = TRUE), digits = 2)
?round()
x <- readr::read_rds("factor_data.rds")
table(x$Группа, x$Пол)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
library(readxl)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych', 'openxlsx')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
beav <- beaver1
beav$id <- 1:nrow(beaver1)
beav <- beav %>% mutate(activ = factor(activ))
ggplot(data = beav,
aes(x = id, y = temp,
group = activ, color = activ)) +
geom_line() +
geom_point()
install.packages("ggfortify")
library(ggfortify)
library("ggfortify")
df <- mtcars[, c("mpg", "disp", "hp", "drat", "wt")] df <- as.matrix(df)
df <- mtcars[, c("mpg", "disp", "hp", "drat", "wt")]
df <- as.matrix(df)
autoplot(scale(df))
set.seed(1234)
wdata = data.frame(
sex = factor(rep(c("F", "M"), each=200)),
weight = c(rnorm(200, 55), rnorm(200, 58)))
ggdensity(wdata, x = "weight",
add = "mean", rug = TRUE,
color = "sex", fill = "sex",
palette = c("#00AFBB", "#E7B800"))
install.packages("survival")
surv_object <- Surv(time = ovarian$futime, event = ovarian$fustat)
library(survival)
surv_object <- Surv(time = ovarian$futime, event = ovarian$fustat)
fit1 <- survfit(surv_object ~ rx, data = ovarian)
summary(fit1)
install.packages("survminer")
install.packages("survMisc")
library(survMisc)
library(survminer)
surv_object <- Surv(time = ovarian$futime, event = ovarian$fustat) fit1 <- survfit(surv_object ~
surv_object <- Surv(time = ovarian$futime, event = ovarian$fustat)
fit1 <- survfit(surv_object ~ rx, data = ovarian)
ggsurvplot(fit1, data = ovarian, pval = TRUE)
install.packages("cmprsk")
library(cmprsk)
set.seed(10)
ftime <- rexp(200)
fstatus <- sample(0:2,200,replace=TRUE)
cov <- matrix(runif(600),nrow=200)
dimnames(cov)[[2]] <- c('x1','x2','x3')
print(z <- crr(ftime,fstatus,cov))
install.packages("aod")
library(aod)
data(orob2)
fm1 <- betabin(cbind(y, n - y) ~ seed, ~ 1, data = orob2)
fm2 <- betabin(cbind(y, n - y) ~ seed + root, ~ 1, data = orob2)
anova(fm1, fm2)
data(sat.act)
corr.test(sat.act)
install.packages("pheatmap")
library(pheatmap)
test = matrix(rnorm(200), 20, 10)
test[1:10, seq(1, 10, 2)] = test[1:10, seq(1, 10, 2)] + 3
test[11:20, seq(2, 10, 2)] = test[11:20, seq(2, 10, 2)] + 2
test[15:20, seq(2, 10, 2)] = test[15:20, seq(2, 10, 2)] + 4
colnames(test) = paste("Test", 1:10, sep = "")
rownames(test) = paste("Gene", 1:20, sep = "")
pheatmap(test)
install.packages("TrialSize")
library("TrialSize")
sample=TrialSize::TwoSampleMean.Equality(0.05,0.2,sigma=1,k=1,margin=2)
print(sample)
install.packages("pROC")
library(pROC)
set.seed(42)
controls <- rnorm(50, 100, 20)
cases <- rnorm(50, 120, 20)
roc(controls = controls,
cases = cases,
plot=T,
ci=T)
install.packages("plotly")
library("plotly")
plotly::plot_ly(economics, x = ~pop)
install.packages("corrplot")
library(corrplot)
data(mtcars)
M = cor(mtcars)
corrplot(M)
install.packages("corrr")
library(corrr)
data(mtcars)
M = cor(mtcars)
rplot(M)
install.packages("factoextra")
library(factoextra)
data(mtcars)
prcomp(mtcars, scale = TRUE)
install.packages("FactoMineR")
library(FactoMineR)
data(mtcars)
pca <- PCA(mtcars, scale = TRUE)
plot(pca, choix = "var")
install.packages("ggbiplot")
library(ggbiplot)
data(mtcars)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("vqv/ggbiplot")
library(ggbiplot)
data(mtcars)
pca <- prcomp(mtcars, scale. = TRUE)
ggbiplot(pca)
install.packages("dagitty")
library(dagitty)
d <- dagitty("dag {
X -> Y
C -> X
C -> Y
}")
is.dagitty(d)
adjustmentSets(d, exposure = "X", outcome = "Y")
install.packages("tidymodels")
library(tidymodels)
install.packages("rpart")
install.packages("rpart")
library(rpart)
rpart(Species ~ ., iris)
install.packages("rattle")
library(rattle)
fancyRpartPlot(rpart(Species ~ ., iris))
install.packages("ranger")
library(ranger)
ranger(Species ~ ., iris)
install.packages("multcomp")
install.packages("GGally")
install.packages("yardstick")
install.packages("Hmisc")
install.packages("broom")
install.packages("ggfortify")
knitr::opts_chunk$set(echo = TRUE)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych', 'openxlsx',
'ggfortify', 'survival', 'survminer', 'survMisc', 'cmprsk', 'aod',
'pheatmap', 'TrialSize', 'pROC', 'plotly', 'corrplot', 'corrr',
'factoextra', 'FactoMineR', 'ggbiplot', 'dagitty', 'tidymodels', 'rpart',
'rattle', 'multcomp', 'GGally', 'yardstick', 'Hmisc', 'broom', 'ggfortify')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
data <- as_tibble(data)
data <- read_tsv("data_tsv.tsv")
data <- as_tibble(data)
tibble(var_first = 1:10,
var_second = var_first^2)
tibble(var_first = 1:10,
var_second = ifelse(var_first < 5, var_first + 100, var_first))
data%>%View()
data%>%
add_column(just_column = "just values", .before = 1)
knitr::opts_chunk$set(echo = TRUE)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych', 'openxlsx',
'ggfortify', 'survival', 'survminer', 'survMisc', 'cmprsk', 'aod',
'pheatmap', 'TrialSize', 'pROC', 'plotly', 'corrplot', 'corrr',
'factoextra', 'FactoMineR', 'ggbiplot', 'dagitty', 'tidymodels', 'rpart',
'rattle', 'multcomp', 'GGally', 'yardstick', 'Hmisc', 'broom', 'ggfortify')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
data%>%
add_row(`Группа` = "New group", `Возраст` = 100, .before = 1)
data <- read_tsv("data_tsv.tsv")
data <- as_tibble(data)
data%>%
add_row(`Группа` = "New group", `Возраст` = 100, .before = 1)
data <- read_tsv("data_tsv.tsv")
data <- as_tibble(data)
data%>%
mutate(ID = row_number())
data%>%
mutate(ID = row_number())
data%>%
mutate(., ID = row_number())
data%>%
mutate(ID = row_number())
data%>%
mutate(ID = dplyr::row_number())
knitr::opts_chunk$set(echo = TRUE)
packages_list <- c('dplyr', 'tidyverse', 'tidyr', "readr", 'readxl', 'haven',
'purrr', 'tibble', 'ggplot2', 'ggpubr', 'stringr',
'flextable', 'lubridate', 'DescTools', 'psych', 'openxlsx',
'ggfortify', 'survival', 'survminer', 'survMisc', 'cmprsk', 'aod',
'pheatmap', 'TrialSize', 'pROC', 'plotly', 'corrplot', 'corrr',
'factoextra', 'FactoMineR', 'ggbiplot', 'dagitty', 'tidymodels', 'rpart',
'rattle', 'multcomp', 'GGally', 'yardstick', 'Hmisc', 'broom', 'ggfortify')
for (i in packages_list) {
if (!(i %in% installed.packages()[, 1])) {
msg <- paste('Пакет ', i, 'не установлен!')
stop(msg, call. = FALSE)
}
library(i, character.only = TRUE, verbose = FALSE)
message(paste('Пакет ', i, 'подключен'))
}
data%>%
mutate('ID' = row_number())
data <- read_tsv("data_tsv.tsv")
data <- as_tibble(data)
data%>%
mutate(`ID` = row_number())
data%>%
mutate(ID = row_number)
data%>%
mutate(ID = row_number())
library(dplyr)
data%>%
mutate(ID = row_number())
data %>% mutate(ID = row_number())
data_1 <- tibble(var_1 = 1:10, var_2 = rep(c("Group 1", "Group 2"), 5))
data_2 <- tibble(var_2 = rbeta(10, 1, 5), var_3 = rnorm(10))
data_3 <- tibble(var_4 = 100:91, var_5 = rep(c("Молодые", "Средний возраст"), 5))
data_1 %>% bind_cols(data_2) %>% bind_cols(data_3)
data_1 <- tibble(var_1 = "var_1", var_2 = "var_2", var_3 = "var_3")
data_2 <- tibble(var_1 = "var_1", var_2 = "var_2")
data_3 <- tibble(var_1 = "var_1", var_2 = "var_2")
data_1 %>% bind_rows(data_2) %>% bind_rows(data_3)
0.01*0.9 + 0.1 *0.1
0.9 * 0.01 / 0.019
0.1 + 0.27 - 0.1*0.27
0.95 * 0.8 / (0.8 *0.95 + 0.05 * (1 – 0.9))
0.95 * 0.8 / (0.8 *0.95 + 0.05 * (1 - 0.9))
0.95 * 0.85 / (0.85 *0.95 + 0.05 * (1 - 0.9))
Вероятность, что человек действительно здоров, при условии, что тест-система выдала отрицательный результат
0.95 * 0.8 / (0.8 *0.95 + 0.05 * (1 - 0.99))
0.95 * 0.8 / (0.8 *0.95 + 0.05 * (1 - 1))
0.95 * 1 / (1 *0.95 + 0.05 * (1 - 0.9))
0.95 * 1 / (1 *0.95 + 0.05 * (1 - 1))
0.95 * 0.5 / (0.5 *0.95 + 0.05 * (1 - 1))
0.95 * 0.5 / (0.5 *0.95 + 0.05 * (1 - 0.9))
0.95 * 0.1 / (0.1 *0.95 + 0.05 * (1 - 0.9))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read_csv("C:/Users/Лиза/git/BioStat_2023/biostat_homework_092023/data/raw/food.csv")
data <- read_csv("C:/Users/Лиза/git/BioStat_2023/biostat_homework_092023/data/raw/food.csv")
View(data)
data %>% summary()
setwd("C:/Users/Лиза/git/BioStat_2023/biostat_homework_092023/data/raw")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read_csv("C:/Users/Лиза/git/BioStat_2023/biostat_homework_092023/data/raw/food.csv")
data <- read_csv("C:/Users/Лиза/git/BioStat_2023/biostat_homework_092023/data/raw/food.csv")
data %>% summary()
data %>%
select(!c(Category, Description, `Nutrient Data Bank Number`)) %>%
psych::describe()
# или другой вариант, где мы выбираем только столбцы с колличественными данными
data %>%
select(where(is.numeric)) %>%
psych::describe()
sum(!complete.cases(data))
# в данных нет пропущенных значений
data <- data %>%
rename(`Nutrient_Data_Bank_Number` = `Nutrient Data Bank Number`)
data <- data %>%
rename_with(function(x) x %>% stringi::stri_replace_all_regex(c("Vitamins."), c(""), vectorize_all = FALSE))
data <- data %>%
rename_with(function(x) x %>%
stringi::stri_replace_all_regex(c("Data.", "Fat.", "Major Minerals."), c("", "", ""), vectorize_all = FALSE))
data <- data %>%
rename_with(function(x) x %>%
stringi::stri_replace_all_regex(" ", "_", vectorize_all = FALSE))
data <- data %>%
mutate(across(c(Category, Description, Nutrient_Bank_Number), ~ as.factor(.x)))
data <- data %>%
arrange(desc(Carbohydrate))
head(data)
